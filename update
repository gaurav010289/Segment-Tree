#include <bits/stdc++.h>
using namespace std;
class SGTree{
    vector<int> seg;
    public:
    SGTree(int n){
        seg.resize(4 * n);
    }
    void build(int ind,int low,int high,int arr[]){
        if(low == high){
            seg[ind] = arr[low];
            return;
        }
        
        int mid = (low+high)/2;
        build(2*ind + 1,low,mid,arr);
        build(2*ind + 2,mid+1,high,arr);
        seg[ind] = min(seg[2*ind + 1] , seg[2*ind + 2]);
    }
    
    int query(int ind,int low,int high,int l,int r,int arr[]){
        // l r low high   low high l r
        if(low > r || high < l)return INT_MAX;
        
        // l low high r
        if(l <= low && high <= r)
            return seg[ind];
        
        int mid = (low+high)/2;
        int left = query(2*ind+1,low,mid,l,r,arr);
        int right = query(2*ind+2,mid+1,high,l,r,arr);
        return min(left,right);
    }
    
    void update(int ind,int low,int high,int i,int val){
        if(low == high){
            seg[ind] = val;
            return;
        }
        int mid = (low+high)/2;
        if(i <= mid)update(2*ind+1,low,mid,i,val);
        else update(2*ind+2,mid+1,high,i,val);
        seg[ind] = min(seg[2*ind+1] , seg[2*ind+2]);
    }
};
int main()
{
    int n;
    cin>>n;
    int arr[n];
    for(int i = 0;i<n;i++)
        cin>>arr[i];
    SGTree sg(n);
    sg.build(0,0,n-1,arr);
    int q;
    cin>>q;
    while(q--){
        int type;
        cin>>type;
        //type = 1 for getting min between l & r.
        if(type == 1){ 
            int l,r;
            cin>>l>>r;
            cout<<sg.query(0,0,n-1,l,r,arr)<<endl;
        }
        else{
            int i,val;
            cin>>i>>val;
            sg.update(0,0,n-1,i,val);
        }
    }
    return 0;
}
